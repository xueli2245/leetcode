234 Palindrome Linked List

题目描述
  Given a singly linked list, determine if it is a palindrome.


例子1
  Input: 1->2
  Output: false

例子2
  Input: 1->2->2->1
  Output: true

Note
  Could you do it in O(n) time and O(1) space?


题目分析
  判断回文序列：1. 首尾对称比较法，如果可以使用下标，可以选择首尾逐一比较；
              2. 定义法：将结构翻转后逐一比较，这里又可以分为翻转全文和翻转一半

  判断字符串是否是回文序列
      直接调用str == str[::-1]进行判断即可（首尾对称比较法）
  判断array list（数组）是否是回文序列
      数组可以使用下标，所以可以用首尾对称比较法
      也可以转换为字符串进行处理（翻转法）
  判断linked list（链表）是否是回文序列
      如果linked list是单向的，首尾对称比较法不太方便，采用翻转法；
      可以是采用新建一个list或者栈实现全文翻转，时间复杂度和空间复杂度都是O(n)
      也可以不新建一个list，在原list上进行修改实现半翻转，时间复杂度是O(n)，但空间复杂度是O(1)
  

解决方法：半翻转
  代码
  class Solution:
    def isPalindrome(self, head: ListNode) -> bool:
        if head is None or head.next is None:
            return True
        else:
            # find the middle position
            quick = head
            slow = head
            flag = 0
            while(quick != None):
                if quick.next == None:
                    flag = 1
                    break
                else:
                    quick = quick.next.next
                    slow = slow.next
            # the length is odd
            if flag == 1:
                slow = slow.next
                
            # revert the list
            cur = slow
            pre = None
            while(cur != None):
                temp = cur.next
                cur.next = pre
                pre = cur
                cur = temp
  分析：时间复杂度为O(n)，空间复杂度为O(1)

做题情况：涉及while循环的时候，忘记++操作，导致进入死循环；一开始想到过转为字符串处理，但是耗时很长，看到有人采用list情况，时间较短。不是很清楚内部机制。
