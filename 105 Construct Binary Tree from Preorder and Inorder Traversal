105. Construct Binary Tree from Preorder and Inorder Traversal

题目描述
	Given preorder and inorder traversal of a tree, construct the binary tree.
	Note:
	You may assume that duplicates do not exist in the tree.

例子
	preorder = [3,9,20,15,7]
	inorder = [9,3,15,20,7]
	Return the following binary tree:
	    3
	   / \
	  9  20
	    /  \
	   15   7

题目分析
	根据前序遍历获得父节点，中序遍历获得左右孩子集合，递归返回当前子树的根节点即可


解决方法：递归
	# Definition for a binary tree node.
	# class TreeNode:
	#     def __init__(self, val=0, left=None, right=None):
	#         self.val = val
	#         self.left = left
	#         self.right = right
	class Solution:
	    def buildTree(self, preorder: List[int], inorder: List[int]) -> TreeNode:
	        if len(preorder) == 0:
	            return None
	        root = TreeNode(val=preorder[0])
	        
	        root_idx = inorder.index(preorder[0])
	        inorder_l = inorder[:root_idx]
	        if root_idx + 1 < len(inorder):
	            inorder_r = inorder[root_idx+1:]
	        else:
	            inorder_r = []
	        
	        num = 1 + len(inorder_l)
	        preorder_l = preorder[1:num]
	        preorder_r = preorder[num:num+len(inorder_r)]

	        left = self.buildTree(preorder_l, inorder_l)
	        right = self.buildTree(preorder_r, inorder_r)
	        
	        root.left = left
	        root.right = right
	        
	        return root
