145. Binary Tree Postorder Traversal

题目描述	
	Given a binary tree, return the postorder traversal of its nodes' values.


例子1
	Input: [1,null,2,3]
	   1
	    \
	     2
	    /
	   3

	Output: [3,2,1]
	Follow up: Recursive solution is trivial, could you do it iteratively?
		  
  
题目分析
 	递归比较简单，重点说一下迭代，不管是以什么样的方式遍历，都是先将最左边的那条路径压入栈中，然后逐个判断，右子节点是否存在，存在则需要将右子节点为根节点的子树最左边链压入栈中。这里需要注意的一点是，如果右子节点存在，则不会pop，则会存在判断多次，从而引起循环。所以需要每个node设置一个flag，已经判断过就将flag设为0，下次不再判断！


解决方法1：递归
	# Definition for a binary tree node.
	# class TreeNode:
	#     def __init__(self, val=0, left=None, right=None):
	#         self.val = val
	#         self.left = left
	#         self.right = right
	class Solution:
	    def myPostOrderTraversal(self, root: TreeNode, result: List[int]) -> List[int]:
	        if root == None:
	            return result
	        result = self.myPostOrderTraversal(root.left, result)
	        result = self.myPostOrderTraversal(root.right, result)
	        result.append(root.val)
	        return result
	    
	    def postorderTraversal(self, root: TreeNode) -> List[int]:
	        result = []
	        result = self.myPostOrderTraversal(root, result)
	        return result
解决方法2：迭代
	# Definition for a binary tree node.
	# class TreeNode:
	#     def __init__(self, val=0, left=None, right=None):
	#         self.val = val
	#         self.left = left
	#         self.right = right
	class Solution:
	    def postorderTraversal(self, root: TreeNode) -> List[int]:
	        result = []
	        if root == None:
	            return result
	        stack = [[root, 1]]
	        cur = root
	        while(cur.left):
	            cur = cur.left
	            stack.append([cur, 1])
	        while(stack):
	            cur = stack[-1]
	            cur_node = cur[0]
	            cur_flag = cur[1]
	            if cur_node.right == None or cur_flag == 0:
	                temp = stack.pop()
	                result.append(temp[0].val)
	            else:
	                stack[-1][1] = 0
	                temp = cur_node.right
	                stack.append([temp, 1])
	                while(temp.left):
	                    temp = temp.left
	                    stack.append([temp, 1])
	        return result    
