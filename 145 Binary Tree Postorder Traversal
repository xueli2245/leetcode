145. Binary Tree Postorder Traversal

题目描述	
	Given a binary tree, return the postorder traversal of its nodes' values.


例子1
	Input: [1,null,2,3]
	   1
	    \
	     2
	    /
	   3

	Output: [3,2,1]
	Follow up: Recursive solution is trivial, could you do it iteratively?
		  
  
题目分析
 	层状输出，需要建立一个父队列和一个子队列，当父队列为空时，把子队列的内容拷贝到父队列，然后子队列清空，并将当前val[]保存


解决方法1：递归
	# Definition for a binary tree node.
	# class TreeNode:
	#     def __init__(self, val=0, left=None, right=None):
	#         self.val = val
	#         self.left = left
	#         self.right = right
	class Solution:
	    def myPostOrderTraversal(self, root: TreeNode, result: List[int]) -> List[int]:
	        if root == None:
	            return result
	        result = self.myPostOrderTraversal(root.left, result)
	        result = self.myPostOrderTraversal(root.right, result)
	        result.append(root.val)
	        return result
	    
	    def postorderTraversal(self, root: TreeNode) -> List[int]:
	        result = []
	        result = self.myPostOrderTraversal(root, result)
	        return result
解决方法2：迭代
	# Definition for a binary tree node.
	# class TreeNode:
	#     def __init__(self, val=0, left=None, right=None):
	#         self.val = val
	#         self.left = left
	#         self.right = right
	class Solution:
	    def postorderTraversal(self, root: TreeNode) -> List[int]:
	        result = []
	        if root == None:
	            return result
	        stack = [[root, 1]]
	        cur = root
	        while(cur.left):
	            cur = cur.left
	            stack.append([cur, 1])
	        while(stack):
	            cur = stack[-1]
	            cur_node = cur[0]
	            cur_flag = cur[1]
	            if cur_node.right == None or cur_flag == 0:
	                temp = stack.pop()
	                result.append(temp[0].val)
	            else:
	                stack[-1][1] = 0
	                temp = cur_node.right
	                stack.append([temp, 1])
	                while(temp.left):
	                    temp = temp.left
	                    stack.append([temp, 1])
	        return result    
