
题目描述
  Given an array nums and a value val, remove all instances of that value in-place and return the new length.

  Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

  The order of elements can be changed. It doesn't matter what you leave beyond the new length.


例子1
  Given nums = [3,2,2,3], val = 3,

  Your function should return length = 2, with the first two elements of nums being 2.

  It doesn't matter what you leave beyond the returned length.
  

例子2
  Given nums = [0,1,2,2,3,0,4,2], val = 2,

  Your function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4.

  Note that the order of those five elements can be arbitrary.

  It doesn't matter what values are set beyond the returned length.

  
题目分析
  涉及到list的问题，分情况讨论，list为空和list不为空；
  list为空，直接返回0；
  list不为空，两个指针一前一后中间夹击，前一个找val，后一个找不为val：
    如果都找到了，则进行交换；
    如果前一个没找到，后一个找到了，说明该list中不存在val；
    如果前一个找到，后一个没找到，说明该list全是val


解决方法1：双指针解法
  代码
  class Solution:
    def removeElement(self, nums: List[int], val: int) -> int:
        if len(nums) == 0:
            return 0
        
        i = 0
        j = len(nums) - 1

        while(1):
            while(nums[i] != val):
                if i < len(nums) - 1:
                    i += 1
                else:
                    return i + 1
            while(nums[j] == val):
                if j > 0:
                    j -= 1
                else:
                    return 0
                
            if i < j:
                temp = nums[i]
                nums[i] = nums[j]
                nums[j] = temp
                i += 1
                j -= 1
            else:
                return j + 1
  分析：时间复杂度为O(n)，空间复杂度为O(1)；
       还可以进一步改进，由于i和j同时前后查找，所以i的上限应该是j，j的下限是i，还需要单独区分不存在val和全为val的情况，比较麻烦
