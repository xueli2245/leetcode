146 LRU Cache


题目描述
  Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.

  get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
  put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.

  The cache is initialized with a positive capacity.

  Follow up:
  Could you do both operations in O(1) time complexity?


例子1
  LRUCache cache = new LRUCache( 2 /* capacity */ );

  cache.put(1, 1);
  cache.put(2, 2);
  cache.get(1);       // returns 1
  cache.put(3, 3);    // evicts key 2
  cache.get(2);       // returns -1 (not found)
  cache.put(4, 4);    // evicts key 1
  cache.get(1);       // returns -1 (not found)
  cache.get(3);       // returns 3
  cache.get(4);       // returns 4


题目分析
  建立数据结构，
  对于get较为简单，key在dict中，则返回value；key不在dict，则返回-1；
  对于put稍微麻烦一下，key在dict中，则更新value，不在dict中则将key放入dict中。但是放入前需要判定size是否已满，如果未满，直接放入；如果已满，需要删除一个元素。
  删除哪一个元素呢？根据最长时间没有操作进行判定，所以每次get或者put都需要把相应的元素移到最前或者最后，这样删除的就可以是相应的最后或者最前。



解决方法：
  代码
  class LRUCache:

    def __init__(self, capacity: int):
        self.capacity = capacity
        self.dict = OrderedDict()

    def get(self, key: int) -> int:
        if key in self.dict.keys():
            self.dict.move_to_end(key)
            return self.dict[key]
        else:
            return -1

    def put(self, key: int, value: int) -> None:
        if key in self.dict.keys():
            self.dict[key] = value
            self.dict.move_to_end(key)
        else:
            if self.capacity:
                self.dict[key] = value
                self.capacity -= 1
            else:
                self.dict.popitem(last=False)
                self.dict[key] = value
  分析：时间复杂度O(1)

做题情况：之前是使用dict+stack实现，dict记录键值对，stack记录操作情况。但是后来发现dict的有序版，
        from collections import OrderedDict()。
        OrderedDict.move_to_end(key)
        OrderedDict.pop(key)
        OrderedDict.popitem(last)
            last = False: queue
            last = True：stack
        OrderedDict.keys()
        OrderedDict.values()
        OrderedDict.items()
        reference blog: https://www.cnblogs.com/zhenwei66/p/6596248.html
