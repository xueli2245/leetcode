143 Reorder List

题目描述
  Given a singly linked list L: L0→L1→…→Ln-1→Ln,
  reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…


例子1
  Given 1->2->3->4, reorder it to 1->4->2->3.


例子2
  Given 1->2->3->4->5, reorder it to 1->5->2->4->3.
  

题目分析
  node依次插入，首先需要对后半部分list进行reverse，然后就可以得到2条list，通过依次插入拼接即可
  1st step: reverse —— 快慢指针（遍历一次） or 计算mid（遍历2次）
  2nd step: 拼接，画图比较容易。


解决方法：循环
  代码
  class Solution:
    def reorderList(self, head: ListNode) -> None:
        """
        Do not return anything, modify head in-place instead.
        """
        if head == None or head.next == None or head.next.next == None:
            pass
        else:
            # find the middle node
            count = 0
            temp = head
            while(temp != None):
                count += 1
                temp = temp.next
            if count % 2 == 0:
                pre_index = count / 2
            else:
                pre_index = count // 2 + 1
            length = 1
            pre = head
            while(length < pre_index):
                pre = pre.next
                length += 1
            slow = pre.next
            pre.next = None
            
            # reverse the later half node
            half_head = self.reverseList(slow)
            
            # combine two list
            cur = head
            cur_half = half_head
            while(cur_half != None):
                temp_cur = cur.next
                temp_cur_half = cur_half.next
                cur.next = cur_half
                cur_half.next = temp_cur
                
                cur = temp_cur
                cur_half = temp_cur_half
                
                
    def reverseList(self, head: ListNode) -> ListNode:
        if head == None or head.next == None:
            return head
        else:
            pre = ListNode(head.val)
            cur = head.next
            while(cur != None):
                temp = cur.next
                cur.next = pre
                pre = cur
                cur = temp
            return pre
                
  分析：时间复杂度为O(n)，空间复杂度为O(1)。

做题情况：思路想出较快，但是实现有点麻烦，第一次忘记将前半段与后半段断开。
