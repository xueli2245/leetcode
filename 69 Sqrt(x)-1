69 Sqrt(x)

题目描述
  Implement int sqrt(int x).

  Compute and return the square root of x, where x is guaranteed to be a non-negative integer.

  Since the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned.


例子1
  Input: 4
  Output: 2


例子2
  Input: 8
  Output: 2
  Explanation: The square root of 8 is 2.82842..., and since 
             the decimal part is truncated, 2 is returned.


题目分析
  求根的方法有两种，第一种是二分法，第二种是牛顿求根法。
  二分法：得到上界和下界，进而不断的逼近真值；
  牛顿求根法：写出迭代公式，通过不断地迭代x逼近真值

解决方法：二分法
  代码
  class Solution:
    def mySqrt(self, x: int) -> int:
        if x <= 1:
            return x
        else:
            temp = x / 2.0
            up = x
            low = 0
            while(int(up) != int(low)):
                if temp**2 > x:
                    up = temp
                elif temp**2 < x:
                    low = temp
                else:
                    return int(temp)
                temp = (up + low) / 2.0
            return int(low)
  分析：时间复杂度O(logn)，空间复杂度O(1)

做题情况：思路较为明确
  
  解决方法：牛顿法
    代码
    class Solution:
    def mySqrt(self, x: int) -> int:
        if x <= 1:
            return x
        else:
            temp = x / 2
            while(1):
                new = (x + temp**2) / (2.0*temp)
                if int(new) == int(temp):
                    return int(new)
                else:
                    temp = new
  note：代码较为简洁，关键在于求根公式 x(n+1) = (1/2)*(x(n)+a/x(n))。
