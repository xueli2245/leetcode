160 Intersection of Two Linked Lists

题目描述
  Write a program to find the node at which the intersection of two singly linked lists begins.


例子1
  Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3
  Output: Reference of the node with value = 8
  Input Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,0,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.


例子2
  Input: intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1
  Output: Reference of the node with value = 2
  Input Explanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [0,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.


例子3
  Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2
  Output: null
  Input Explanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.
  Explanation: The two lists do not intersect, so return null.


Note:
  If the two linked lists have no intersection at all, return null.
  The linked lists must retain their original structure after the function returns.
  You may assume there are no cycles anywhere in the entire linked structure.
  Your code should preferably run in O(n) time and use only O(1) memory.


题目分析
  寻找交叉点。由于linked list的长度不同，所以没有办法直接比较。需要先计算各自的长度(a > b)，然后找到a中a-b+1的位置，然后逐个比较


解决方法：
  代码
  class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:
        if headA is None or headB is None:
            return None
        elif headA == headB:
            return headA
        else:
            point_A = headA
            point_B = headB
            
            len_A= 1
            len_B = 1
            
            while(point_A.next != None):
                point_A = point_A.next
                len_A += 1
            
            while(point_B.next != None):
                point_B = point_B.next
                len_B += 1
            
            if point_A != point_B:
                return None
            
            point_A = headA
            point_B = headB
            
            if len_A > len_B:
                dif = len_A - len_B
                while(dif > 0):
                    point_A = point_A.next
                    dif -= 1
            elif len_B > len_A:
                dif = len_B - len_A
                while(dif > 0):
                    point_B = point_B.next
                    dif -= 1
            
            while(point_A != point_B):
                point_A = point_A.next
                point_B = point_B.next
                
            return point_A
            
  分析：时间复杂度O(n)，空间复杂度为O(1)

做题情况：题目思路较偏，不是以node是否相等为出发点，而是value的值是否相同为出发点，走了弯路。
