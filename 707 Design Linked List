707. Design Linked List

题目描述
  Design your implementation of the linked list. You can choose to use the singly linked list or the doubly linked list. A node in a singly linked list should have two attributes: val and next. val is the value of the current node, and next is a pointer/reference to the next node. If you want to use the doubly linked list, you will need one more attribute prev to indicate the previous node in the linked list. Assume all nodes in the linked list are 0-indexed.

  Implement these functions in your linked list class:

  get(index) : Get the value of the index-th node in the linked list. If the index is invalid, return -1.

  addAtHead(val) : Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.

  addAtTail(val) : Append a node of value val to the last element of the linked list.

  addAtIndex(index, val) : Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.

  deleteAtIndex(index) : Delete the index-th node in the linked list, if the index is valid.
 

例子1
  Input: 
	["MyLinkedList","addAtHead","addAtTail","addAtIndex","get","deleteAtIndex","get"]
	[[],[1],[3],[1,2],[1],[1],[1]]
	Output:  
	[null,null,null,null,2,null,3]

  Explanation:
	MyLinkedList linkedList = new MyLinkedList(); // Initialize empty LinkedList
	linkedList.addAtHead(1);
	linkedList.addAtTail(3);
	linkedList.addAtIndex(1, 2);  // linked list becomes 1->2->3
	linkedList.get(1);            // returns 2
	linkedList.deleteAtIndex(1);  // now the linked list is 1->3
	linkedList.get(1);            // returns 3
 

  Constraints:

	0 <= index,val <= 1000
	Please do not use the built-in LinkedList library.
	At most 2000 calls will be made to get, addAtHead, addAtTail,  addAtIndex and deleteAtIndex.
  
  
题目分析
  建立linked list实现初始化、获取下标的元素、在头增加、在尾部增加、删除元素，均与下标有关（从0开始）


解决方法1：找到pre为第一个不同元素，如果cur重复，则cur右移直到找到一个新的元素
  代码
  	# 为了后续对节点操作更加简单，建立node的class
  	class ListNode:
	    def __init__(self, value=0, next=None):
	        self.val = value
	        self.next = next

	class MyLinkedList:

		# 初始化操作，注意这里建立了一个空node，node.next才是真正list开始，这样较为方便
	    def __init__(self):
	        """
	        Initialize your data structure here.
	        """
	        self.head = ListNode()
	        

	    # 对index分情况讨论：整体合理范围内和外；整体合理范围内，区分是否在链表的合理范围内；链表的合理范围内，获取链表的第0个、中间和最后一个。
	    # 这里没看见上述限制，index和val的合理范围（0 <= index,val <= 1000）
	    # 注意，由于head单独的存在，所以count从-1开始，count<index循环最后得到的就是index对应的元素
	    def get(self, index: int) -> int:
	        """
	        Get the value of the index-th node in the linked list. If the index is invalid, return -1.
	        """
	        if index < 0 or index > 1000:
	            return -1
	        count = -1
	        cur = self.head
	        while(count < index):
	            cur = cur.next
	            if cur == None:
	                return -1
	            count += 1
	        return cur.val    
	        
	    # 从头插入，由于head单独的存在较为简单
	    def addAtHead(self, val: int) -> None:
	        """
	        Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.
	        """
	        new_node = ListNode()
	        new_node.val = val
	        new_node.next = self.head.next
	        self.head.next = new_node
	        
	    # 从尾插入，只需要判断cur.next是否为None即可获得最后一个元素
	    def addAtTail(self, val: int) -> None:
	        """
	        Append a node of value val to the last element of the linked list.
	        """
	        new_node = ListNode()
	        new_node.val = val
	        cur = self.head
	        while(cur.next):
	            cur = cur.next
	        cur.next = new_node
	        

	    # 在index前插入，同理：整体合理范围内和外；整理合理范围内，链表合理范围内外；链表合理范围内，头部、中间、尾部
	    # 注意这里的条件是index-1，这样，获取的node为index对应node前一个，直接插入即可
	    def addAtIndex(self, index: int, val: int) -> None:
	        """
	        Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.
	        """
	        if index >= 0:
	            new_node = ListNode()
	            new_node.val = val
	            count = -1
	            cur = self.head
	            while(count < index-1):
	                cur = cur.next
	                if cur == None:
	                    break
	                count += 1
	            # 判断链表和合理范围内外！！！
	            if cur != None:
	                new_node.next = cur.next
	                cur.next = new_node
	        
	    # 删除index th元素，同理，条件使用index-1，这样条件找到元素为index前一个，操作简便
	    def deleteAtIndex(self, index: int) -> None:
	        """
	        Delete the index-th node in the linked list, if the index is valid.
	        """
	        if index >= 0:
	            count = -1
	            cur = self.head
	            while(count < index-1):
	                cur = cur.next
	                if cur == None:
	                    break
	                count += 1
	            # 同理，判断是否在链表合理范围内
	            if cur != None and cur.next != None:
	                cur.next = cur.next.next


		# Your MyLinkedList object will be instantiated and called as such:
		# obj = MyLinkedList()
		# param_1 = obj.get(index)
		# obj.addAtHead(val)
		# obj.addAtTail(val)
		# obj.addAtIndex(index,val)
		# obj.deleteAtIndex(index)
