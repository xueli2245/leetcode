951. Flip Equivalent Binary Trees

题目描述	
	For a binary tree T, we can define a flip operation as follows: choose any node, and swap the left and right child subtrees.

	A binary tree X is flip equivalent to a binary tree Y if and only if we can make X equal to Y after some number of flip operations.

	Write a function that determines whether two binary trees are flip equivalent.  The trees are given by root nodes root1 and root2.
	 

例子1
	Input: root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7]
	Output: true
	Explanation: We flipped at nodes with values 1, 3, and 5.
	Flipped Trees Diagram

Note:

	Each tree will have at most 100 nodes.
	Each value in each tree will be a unique integer in the range [0, 99].
		  
  
题目分析
 	弄清flip equivalent的定义，主要判断左右child是否相等，or 交换是否相等。顶层的交换会影响后面，所以使用层状遍历，借助stack即可实现。关键步骤：1. 整体层状遍历；2. 判断当前node的val是否相等，判断当前node的孩子val值集合是否相同，不同即可返回False，相同需要确定顺序；3. 值得注意的是None，没有办法调用val值，所以需要先进行判断！


解决方法1：层状遍历
	# Definition for a binary tree node.
	# class TreeNode:
	#     def __init__(self, val=0, left=None, right=None):
	#         self.val = val
	#         self.left = left
	#         self.right = right
	class Solution:
	    def getVal(self, root: TreeNode, val: List) -> List:
	        if root == None:
	            val.append(-1)
	        else:
	            val.append(root.val)
	        return val     
	    
	    def flipEquiv(self, root1: TreeNode, root2: TreeNode) -> bool:
	        queue1 = []
	        queue2 = []
	        queue1.append(root1)
	        queue2.append(root2)
	        
	        while(queue1):            
	            cur1 = queue1.pop(0)
	            cur2 = queue2.pop(0)
	            if cur1 == None and cur2 == None:
	                continue
	            if cur1 == None or cur2 == None:
	                return False
	            if cur1.val != cur2.val:
	                return False
	            
	            val1 = []
	            val2 = []
	            
	            node1 = [cur1.left, cur1.right]
	            node2 = [cur2.left, cur2.right]
	            
	            val1 = self.getVal(cur1.left, val1)
	            val1 = self.getVal(cur1.right, val1)
	            val2 = self.getVal(cur2.left, val2)
	            val2 = self.getVal(cur2.right, val2)
	            
	            if val1[0] == val2[0] and val1[1] == val2[1]:
	                queue1.extend(node1)
	                queue2.extend(node2)
	            elif val1[0] == val2[1] and val1[1] == val2[0]:
	                queue1.extend(node1[::-1])
	                queue2.extend(node2)
	            else:
	                return False
	        return True
        
	分析：时间复杂度为O(n)，空间复杂度为O(n)

知识小卡片
	list的pop(0)代表删除第0个元素

        
