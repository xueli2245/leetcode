987. Vertical Order Traversal of a Binary Tree

题目描述	
	Given a binary tree, return the vertical order traversal of its nodes values.

	For each node at position (X, Y), its left and right children respectively will be at positions (X-1, Y-1) and (X+1, Y-1).

	Running a vertical line from X = -infinity to X = +infinity, whenever the vertical line touches some nodes, we report the values of the nodes in order from top to bottom (decreasing Y coordinates).

	If two nodes have the same position, then the value of the node that is reported first is the value that is smaller.

	Return an list of non-empty reports in order of X coordinate.  Every report will have a list of values of nodes.


例子1
	Input: [3,9,20,null,null,15,7]
	Output: [[9],[3,15],[20],[7]]
	Explanation: 
	Without loss of generality, we can assume the root node is at position (0, 0):
	Then, the node with value 9 occurs at position (-1, -1);
	The nodes with values 3 and 15 occur at positions (0, 0) and (0, -2);
	The node with value 20 occurs at position (1, -1);
	The node with value 7 occurs at position (2, -2).


Note:
	The tree will have between 1 and 1000 nodes.
	Each node's value will be between 0 and 1000.

  
题目分析
	采取dict的数据结构，将x作为key, (y, val)作为元素。先进行层状遍历，完善dict，同时将y-1改为y+1，这样y就是从小到大，便于排序。然后对x进行排序，再对y进行排序，y相同时则对val进行排序。
 	


解决方法1：递归
	# Definition for a binary tree node.
	# class TreeNode:
	#     def __init__(self, val=0, left=None, right=None):
	#         self.val = val
	#         self.left = left
	#         self.right = right
	import numpy as np
	result = {}
	class Solution:
	    def layerTraverse(self, root: TreeNode, result: dict) -> dict:
	        cur = root
	        stack = [(root, 0, 0)]
	        while(stack):
	            cur = stack.pop(0)
	            cur_node = cur[0]
	            cur_idx_x = cur[1]
	            cur_idx_y = cur[2]
	            if cur_idx_x in result.keys():
	                result[cur_idx_x].append((cur_idx_y, cur_node.val))
	            else:
	                result[cur_idx_x] = [(cur_idx_y, cur_node.val)]
	            if cur_node.left != None:
	                stack.append((cur_node.left, cur_idx_x-1, cur_idx_y+1))
	            if cur_node.right != None:
	                stack.append((cur_node.right, cur_idx_x+1, cur_idx_y+1))
	        return result
	                
	        
	    def verticalTraversal(self, root: TreeNode) -> List[List[int]]:
	        if root == None:
	            return []
	        result = {}
	        result = self.layerTraverse(root, result)
	        key = result.keys()
	        sort_k = [i for i in key]
	        sort_k.sort()
	        total = []
	        for i in sort_k:
	            temp = result[i]
	            temp.sort()
	            val = []
	            for j in temp:
	                val.append(j[1])
	            total.append(val)
	        return total
	        
	            
