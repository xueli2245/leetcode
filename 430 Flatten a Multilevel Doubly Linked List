430. Flatten a Multilevel Doubly Linked List

题目描述
  You are given a doubly linked list which in addition to the next and previous pointers, it could have a child pointer, which may or may not point to a separate doubly linked list. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure, as shown in the example below.

  Flatten the list so that all the nodes appear in a single-level, doubly linked list. You are given the head of the first level of the list.
 

例子1
	Input: head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]
	Output: [1,2,3,7,8,11,12,9,10,4,5,6]

例子2
	Input: head = [1,2,null,3]
	Output: [1,3,2]
	Explanation:
		The input multilevel linked list is as follows:

		  1---2---NULL
		  |
		  3---NULL
 
Constraints:
	Number of Nodes will not exceed 1000.
	1 <= Node.val <= 10^5
	  
  
题目分析
  层状结构，需要先处理child，然后处理next，所以使用栈的数据结构较为合理


解决方法1：找到pre为第一个不同元素，如果cur重复，则cur右移直到找到一个新的元素
  代码
  	"""
	# Definition for a Node.
	class Node:
	    def __init__(self, val, prev, next, child):
	        self.val = val
	        self.prev = prev
	        self.next = next
	        self.child = child
	"""

	class Solution:
	    def flatten(self, head: 'Node') -> 'Node':
	        if head == None:
	            return head
	        stack = []
	        cur = head
	        while(cur.child != None or cur.next != None):
	            if cur.child == None:
	                cur = cur.next
	            else:
	                if cur.next != None:
	                    stack.append(cur.next)
	                cur.next = cur.child
	                cur.child.prev = cur
	                cur.child = None
	                cur = cur.next
	                        
	        while(len(stack) > 0):
	            new_node = stack.pop()
	            cur.next = new_node
	            new_node.prev = cur
	            cur = new_node

	            while(cur.child != None or cur.next != None):
	                if cur.child == None:
	                    cur = cur.next
	                else:
	                    if cur.next != None:
	                        stack.append(cur.next)
	                    cur.next = cur.child
	                    cur.child.prev = cur
	                    cur.child = None
	                    cur = cur.next
	        return head
	分析：时间复杂度O(n),空间复杂度O(1)            
