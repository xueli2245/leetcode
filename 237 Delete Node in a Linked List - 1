

题目描述
  Write a function to delete a node (except the tail) in a singly linked list, given only access to that node.

  Given linked list -- head = [4,5,1,9], which looks like following:
  4 —> 5 —> 1 —> 9


例子1
  Input: head = [4,5,1,9], node = 5
  Output: [4,1,9]
  Explanation: You are given the second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function.

例子2
  Input: head = [4,5,1,9], node = 1
  Output: [4,5,9]
  Explanation: You are given the third node with value 1, the linked list should become 4 -> 5 -> 9 after calling your function.
  
Note
  The linked list will have at least two elements.
  All of the nodes' values will be unique.
  The given node will not be the tail and it will always be a valid node of the linked list.
  Do not return anything from your function.


题目分析
  删除ListNode中的指定值的node，之给定需要删除的node，list的head并没有给出，但是需要将给定的node删除。解决方案是利用后面的值不断进行覆盖，然后删除最后一个即可


解决方法：
  代码
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
  class Solution:
      def deleteNode(self, node):
          """
          :type node: ListNode
          :rtype: void Do not return anything, modify node in-place instead.
          """
          cur = node
          nex = node.next
          while(nex != None):
              cur.val = nex.val
              temp = nex
              nex = nex.next
              if nex != None:
                  cur = temp
          cur.next = None
  分析：时间复杂度为O(n)，空间复杂度为O(1)

做题情况：没有明白题目含义，没有想出来，（-1）表示需要重做
