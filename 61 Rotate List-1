61 Rotate List


题目描述
  Given a linked list, rotate the list to the right by k places, where k is non-negative.


例子1
  Input: 1->2->3->4->5->NULL, k = 2
  Output: 4->5->1->2->3->NULL
  Explanation:
  rotate 1 steps to the right: 5->1->2->3->4->NULL
  rotate 2 steps to the right: 4->5->1->2->3->NULL


例子2
  Input: 0->1->2->NULL, k = 4
  Output: 2->0->1->NULL
  Explanation:
  rotate 1 steps to the right: 2->0->1->NULL
  rotate 2 steps to the right: 1->2->0->NULL
  rotate 3 steps to the right: 0->1->2->NULL
  rotate 4 steps to the right: 2->0->1->NULL


题目分析
  注意边界条件，linked list为空，只含一个元素，或者k=0的情况，通通返回head；
  对于至少有2个node的list，将首尾连接，然后寻找到翻转后新的node，断开即可。
  注意：表达式中涉及length-k，所以需要判定k与length之间的大小关系，如果k>length，还需要对k进行求余操作。


解决方法：
  代码
  class Solution:
    def rotateRight(self, head: ListNode, k: int) -> ListNode:
        if head == None or head.next == None or k == 0:
            return head
        else:
            point = head
            length = 1
            while(point.next != None):
                point = point.next
                length += 1
            point.next = head
            
            count = 1
            cur = head
            if k >= length:
                k %= length
            while(count < length - k):
                cur = cur.next
                count += 1
                
            new_head = cur.next
            cur.next = None
            return new_head
  分析：时间复杂度O(n)，空间复杂度为O(1)

做题情况：注意考察边界情况，求linked list的长度
  point = head
  count = 0
  while(point != None):
    count += 1
    point = point.next
  与下面这种等价
  point = head
  count = 1
  while(point.next != None):
    count += 1
    point = point.next
