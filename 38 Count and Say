题目描述
  The count-and-say sequence is the sequence of integers with the first five terms as following:

  1.     1
  2.     11
  3.     21
  4.     1211
  5.     111221
  1 is read off as "one 1" or 11.
  11 is read off as "two 1s" or 21.
  21 is read off as "one 2, then one 1" or 1211.

  Given an integer n where 1 ≤ n ≤ 30, generate the nth term of the count-and-say sequence. You can do so recursively, in other words from the previous member read off the digits, counting the number of digits in groups of the same digit.

  Note: Each term of the sequence of integers will be represented as a string.


例子1
  Input: 1
  Output: "1"
  Explanation: This is the base case.
  

例子2
  Input: 4
  Output: "1211"
  Explanation: For n = 3 the term was "21" in which we have two groups "2" and "1", "2" can be read as "12" which means frequency = 1 and value = 2, the same way "1" is read as "11", so the answer is the concatenation of "12" and "11" which is "1211".

  
题目分析
  题目有点难读，但是结合例子比较容易理解，其实就是计算各个元素的个数


解决方法：
  代码
  class Solution:
    def countAndSay(self, n: int) -> str:
        start = '1'
        if n == 1:
            return start
        elif n == 2:
            return '1'+start
        else:
            cur_str = start
            count = 1
            while(count < n):
                nex_str = ''
                # compute the nex_str according to current str
                    # len(cur_str) > 1
                i = 0
                while i < len(cur_str):
                    j = 0
                    while(cur_str[i] == cur_str[i+j]):
                        j += 1
                        if i+j >= len(cur_str):
                            break
                    nex_str = nex_str + str(j) + cur_str[i]
                    i = i + j           
                cur_str = nex_str
                count += 1
            return cur_str
