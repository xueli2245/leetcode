题目描述
  Write a function to find the longest common prefix string amongst an array of strings.
  If there is no common prefix, return an empty string "".


例子
  Example 1:
    Input: ["flower","flow","flight"]
    Output: "fl"
  Example 2:
    Input: ["dog","racecar","car"]
    Output: ""
    Explanation: There is no common prefix among the input strings.
  Note:All given inputs are in lowercase letters a-z.
  
  
题目分析
  求最长前缀有两种方式，从0到1或者从1到0.
   1）从0到1，找到长度最段的元素，从第一位开始，逐位比较
   2）从1到0，找到长度最短的元素，用整个字符串进行比较，不行就去掉最后一位，直到找到最长前缀。


解决方法1：从0到1
  代码
  class Solution:
    def longestCommonPrefix(self, strs: List[str]) -> str:
        if len(strs) == 0:
            return ''
        min_ele = min(strs, key=len)
        prefix = ''
        for i in range(len(min_ele)):
            if len(set([s[i] for s in strs])) == 1:
                prefix += strs[0][i]
            else:
                break
        return prefix
  分析：时间复杂度为O(n), 空间复杂度为O(n)


解决方法2：从1到0
  代码
  class Solution:
    def longestCommonPrefix(self, strs: List[str]) -> str:
        if len(strs) == 0:
            return ''
        min_ele = min(strs, key=len)
        flag = 0
        while(len(min_ele) > 0):
            for i in range(len(strs)):
                if not strs[i].startswith(min_ele):
                    min_ele = min_ele[:-1]
                    break
                else:
                    if i == len(strs) - 1:
                        flag = 1
            # discriminate the break one and the go through one
            if flag == 1:
                return min_ele
        return ""
  分析：时间复杂度为O(n)，所以算法总的时间复杂度为O(n)，空间复杂度为O(n)
 
 
知识小卡片：min/max函数用法
  源码
      def max(*args, key=None): # known special case of max
      """
      max(iterable, *[, default=obj, key=func]) -> value
      max(arg1, arg2, *args, *[, key=func]) -> value

      With a single iterable argument, return its biggest item. The
      default keyword-only argument specifies an object to return if
      the provided iterable is empty.
      With two or more arguments, return the largest argument.
      """
      pass
   
  初级技巧：直接用
      a = [1, 2, 3]
      min(a) -> 1
  
  中级技巧：使用key属性
      a = [1, -3, 2]
      max(a, key=abs) -> -3
  
  高级技巧：从字典中找出value最大的那组值
      price = {'A':1, 'B':3, 'C':7}
      max(zip(price.values(), price.keys())) -> (7, 'C')

reference: https://www.cnblogs.com/whatisfantasy/p/6273913.html
  
