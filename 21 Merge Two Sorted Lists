
题目描述
  Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.


例子
  Input: 1->2->4, 1->3->4
  Output: 1->1->2->3->4->4
  
  
题目分析
  思路较为简单，不使用插入的方法，直接新建一个list，每次将l1和l2较小的值插入新的list中即可，注意分析list1遍历完但是l2没有遍历完的情况。


解决方法1：需要从x之后的元素中进行查找
  代码
  class Solution:
    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:
        if l1 == None:
            return None if l2 == None else l2
        if l2 == None:
            return l1
        # l1 and l2 are not none
        merge_ls = None
        while(l1 != None and l2 != None):
            temp = ListNode()
            
            if l1.val <= l2.val:
                temp.val = l1.val
                l1 = l1.next
            else: 
                temp.val = l2.val
                l2 = l2.next
            
            if merge_ls == None:
                merge_ls = temp
                cur = merge_ls
            else:
                cur.next = temp
                cur = cur.next
        if l1 == None and l2 != None:
            cur.next = l2
        if l1 != None and l2 == None:
            cur.next = l1
        return merge_ls 
  分析：时间复杂度为O(n)，空间复杂度为O(n)
