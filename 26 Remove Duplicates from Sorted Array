
题目描述
  Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.

  Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.


例子1
  Given nums = [1,1,2],

  Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.

  It doesn't matter what you leave beyond the returned length.
  

例子2
  Given nums = [0,0,1,1,1,2,2,3,3,4],

  Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.

  It doesn't matter what values are set beyond the returned length.

  
题目分析
  用2个指针比较前后两个数字是否相同，不同则2个指针同时向前移动一步；相同则删除在前的那个指针指向的那个值，然后指针保持不变，直到在前的指针遍历完list中所有元素


解决方法1：删除元素，返回没有重复元素的list
  代码
  class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        if len(nums) <= 1:
            return len(nums)
        else:
            ori_len = len(nums)
            cur = 0
            nex = 1
            while nex < len(nums):
                if nums[cur] == nums[nex]:
                    nums.pop(nex)
                else:
                    cur += 1
                    nex += 1
            return len(nums)
  分析：python list的查找时间复杂度为O(n)，所以该算法总的时间复杂度其实为O(n^2)，空间复杂度为O(1)

问题：需要删除重复元素，list.pop(i)的时间复杂度是O(n)，加上外层的遍历，总的时间复杂度为O(n^2)；而且删除后list的长度是不断变化的

改进：不删除元素，用不重复元素进行覆盖
  代码
  class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        if len(nums) <= 1:
            return len(nums)
        else:
            ori_len = len(nums)
            cur = 0
            nex = 1
            while nex < len(nums):
                if nums[cur] != nums[nex]:
                    nums[cur+1] = nums[nex]
                    cur += 1
                    nex += 1
                else:
                     nex += 1
            return cur+1
  分析：这样时间复杂度为O(n),空间复杂度为O(1)
