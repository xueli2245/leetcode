23 Merge k Sorted Lists


题目描述
  Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.


例子1
    Input:
  [
    1->4->5,
    1->3->4,
    2->6
  ]
  Output: 1->1->2->3->4->4->5->6


题目分析
  合并k个linked list
  方法1：遍历所有linked list，取出值到list中，然后排好序，新建一个linked list，放回。
  方法2：采用递归的方法，第一个和后面排好序的list合并，递归调用。（效率低，没办法通过）
  方法3：采用分治的方法，类似于二分法，不断进行对半划分，然后归并。


解决方法：直接递归法
  代码
  class Solution:
    def mergeKLists(self, lists: List[ListNode]) -> ListNode:
        if len(lists) == 0:
            return None
        elif len(lists) == 1:
            return lists[0]
        else:
            head1 = lists[0]
            head2 = self.mergeKLists(lists[1:])
            l1 = head1
            l2 = head2
            new_head = ListNode(0)
            temp = new_head
            while(l1 and l2):
                if l1.val < l2.val:
                    temp.next = ListNode(l1.val)
                    temp = temp.next
                    l1 = l1.next
                elif l1.val > l2.val:
                    temp.next = ListNode(l2.val)
                    temp = temp.next
                    l2 = l2.next
                else:
                    temp.next = ListNode(l1.val)
                    temp = temp.next
                    temp.next = ListNode(l2.val)
                    temp = temp.next
                    l1 = l1.next
                    l2 = l2.next
            if l1 == None and l2 != None:
                temp.next = l2
            elif l1 != None and l2 == None:
                temp.next = l1
            else:
                temp.next = None
            return new_head.next
  分析：时间复杂度O(n^2)，空间复杂度O(1)


  改进方法：分治法
    代码
    class Solution:
    def mergeKLists(self, lists: List[ListNode]) -> ListNode:
        if len(lists) == 0:
            return None
        elif len(lists) == 1:
            return lists[0]
        else:
            mid = int((len(lists)+1) // 2)
            head1 = self.mergeKLists(lists[:mid])
            head2 = self.mergeKLists(lists[mid:])
            l1 = head1
            l2 = head2
            new_head = ListNode(0)
            temp = new_head
            while(l1 and l2):
                if l1.val < l2.val:
                    temp.next = ListNode(l1.val)
                    temp = temp.next
                    l1 = l1.next
                elif l1.val > l2.val:
                    temp.next = ListNode(l2.val)
                    temp = temp.next
                    l2 = l2.next
                else:
                    temp.next = ListNode(l1.val)
                    temp = temp.next
                    temp.next = ListNode(l2.val)
                    temp = temp.next
                    l1 = l1.next
                    l2 = l2.next
            if l1 == None and l2 != None:
                temp.next = l2
            elif l1 != None and l2 == None:
                temp.next = l1
            else:
                temp.next = None
            return new_head.next
  分析：时间复杂度O(nlogn)，空间复杂度O(1)
  
  tips：分治法和最大堆，最小堆
