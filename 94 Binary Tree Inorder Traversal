94. Binary Tree Inorder Traversal

题目描述
  
	Given a binary tree, return the inorder traversal of its nodes' values.
 

例子1
	Input: [1,null,2,3]
	   1
	    \
	     2
	    /
	   3

	Output: [1,3,2]


Follow up: Recursive solution is trivial, could you do it iteratively?
		  
  
题目分析
 	中序遍历，先左子节点，然后父节点，最后右子节点。递归写法较为简单，迭代比较难想。迭代需要借助栈存放之前的节点，直到找到最左的节点，压入栈中，然后pop出来，打印，然后将右子节点作同样的处理。


解决方法1：递归
	# Definition for a binary tree node.
	# class TreeNode:
	#     def __init__(self, val=0, left=None, right=None):
	#         self.val = val
	#         self.left = left
	#         self.right = right
	class Solution:
	    def inOrder(self, root: TreeNode, nodes: List) -> List[int]:
	        if root == None:
	            return nodes
	        nodes = self.inOrder(root.left, nodes)
	        nodes.append(root.val)
	        nodes = self.inOrder(root.right, nodes)
	        return nodes
	    
	    def inorderTraversal(self, root: TreeNode) -> List[int]:
	        nodes = []
	        nodes = self.inOrder(root, nodes)
	        return nodes
        
	分析：时间复杂度为O(n)，空间复杂度为O(n)

解决方法2：迭代
	# Definition for a binary tree node.
	# class TreeNode:
	#     def __init__(self, val=0, left=None, right=None):
	#         self.val = val
	#         self.left = left
	#         self.right = right
	class Solution:
	    def inorderTraversal(self, root: TreeNode) -> List[int]:
	        nodes = []
	        if root == None:
	            return nodes
	        stack = []
	        cur = root
	        while(cur):
	            stack.append(cur)
	            cur = cur.left
	            
	        while(stack):
	            cur = stack.pop()
	            nodes.append(cur.val)
	            temp = cur.right
	            while(temp):
	                stack.append(temp)
	                temp = temp.left
	        return nodes
