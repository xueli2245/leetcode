题目描述
  Given an array of integers, return indices of the two numbers such that they add up to a specific target.
  You may assume that each input would have exactly one solution, and you may not use the same element twice.


例子
  Given nums = [2, 7, 11, 15], target = 9,
  Because nums[0] + nums[1] = 2 + 7 = 9,
  return [0, 1].
  
  
题目分析
  遍历array中的每一个数，假设当前为x，如果target-x=y也在array中，那么返回x和y的位置即可。


问题：x == y的情况下，array中只有只有1个x，那么此时返回的y的下标其实是x的下标；
                    array中有x和y，x先出现，用.index(y)得到的下标其实是x的下标。


解决方法1：需要从x之后的元素中进行查找
  代码
  class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        for i in range(len(nums)-1):
            a = nums[i]
            b = target - nums[i]
            # b is in the lists
            if b in nums[i+1:]:
                return [i, i+1+nums[i+1:].index(b)]
  分析：python list的查找时间复杂度为O(n)，所以该算法总的时间复杂度其实为O(n^2)，空间复杂度为O(1)


解决方法2：从x之前的元素中进行查找
  代码
  class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        new_dict = {}
        for i in range(len(nums)):
            a = nums[i]
            b = target - nums[i]
            if b in new_dict:
                return [new_dict[b], i]
            else:
                new_dict[a] = i
  分析：python dict底层其实是hash table，查找时间复杂度为O(1)，所以算法总的时间复杂度为O(n)，空间复杂度为O(n)——存放dict
  
  
知识卡片小结

  list 常用函数和方法：https://www.runoob.com/python/python-lists.html
       不熟悉的    list.count(i) i出现的次数
                  list.index(i) i出现的位置
                  list.insert(index, obj) 将obj插入到index
                  list.pop(index=-1) 根据下标移除元素
                  list.remove(obj)   移除第一个匹配到的元素值
                  list.reverse()     链表反转
                  list.sort(cmp=None, key=None, reverse=False)
                    key用来比较的元素，reverse=Flase，升序；reverse=True，降序
                    例子
                      # 获取列表的第二个元素
                      def takeSecond(elem):
                          return elem[1]

                      # 列表
                      random = [(2, 2), (3, 4), (4, 1), (1, 3)]

                      # 指定第二个元素排序
                      random.sort(key=takeSecond)

                      # 输出类别
                      print '排序列表：', random
                      
                      # 结果
                      [(4, 1), (2, 2), (1, 3), (3, 4)]
                      
   dict 常用函数和方法：https://www.runoob.com/python/python-dictionary.html
        不熟悉的  dict.clear()
                 dict.get(key)
                 dict.has_key(key) -- in操作代替
                 dict.values() 返回字典中所有值
                 popitem() 返回并删除字典中最后一对键和值
                 pop(key) 删除键为key的键值对
                 
  
  关于深复制、浅复制以及赋值操作
      a = b, a与b占用的是同一块内存空间
      a = copy.copy(b), 浅复制，只复制了第一层外层空间
        eg: b = [1, 2, [3, 4]]
            a = copy.copy(b)
            id(a) != id(b) but id(a[2]) == id(b[2]) 
      a = copy.deepcopy(b), 深复制，所有的都是新的
            id(a) != id(b) and id(a[2]) != id(b[2])
 
 
 hash表：https://hit-alibaba.github.io/interview/basic/algo/Hash-Table.html
